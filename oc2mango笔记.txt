变量引用:
| objc_method_call
| 地址 &x
| 取地址 *x
| 变量名称
| (type *) 变量引用

特殊值类型:
| block: type ^(type x, type x) { funcImp }
| @[]
| @{}
| @()
| CFString
| 字符串: @""

通用值类型:
| objc_method_call
| 整形数字
| 浮点数
| 地址 &x
| 取地址 *x
| 变量名称
| (type *) 通用值类型

值类型:
| 特殊值类型
| 通用值类型

操作符:


// 一元操作符
 ++
 --
 -=
 +=
 /=
 *=
 /=
 %=
 &=
 |=
 ^=
 =

//三目操作符
 condition ? x : y

// 二元操作符
// 左 : '(':optional  变量引用
// 右 : 通用值类型 ')': optiona
 ?:
 <<
 >>
 &
 |
 ^
 -
 +
 *
 /
 %




赋值表达式:   | 操作表达式 | 

声明表达式: type *name | type *name = 赋值表达式;
三目操作符: 赋值表达式 ? 赋值表达式 : 赋值表达式;


判断符:
// 左 操作表达式
// 右 操作表达式
 ==
 !=
 <
 <=
 >
 >=
 !

类型声明:
void
int
unsigned int
unsigned long
...
SEL
Class
类名
类型声明 *
block: type (^name)(type, type) | type (^name)(type x, type x)




控制关键字:
if
else if
else
do
while
goto
switch
case
default
break
continue
return
for
in


函数声明:

// C
// 1. FunctinDeclare
// returnType name types parameters
// 2. FunctionImplementation  -> "{  }"
void cFunc(void a, int *b){

}

// Block
// 1. BlockDeclare
// returnType name types parameters
// 2. FunctionImplementation -> "{  }"
void (^name)(int, int) = void ^ (int a, int b){

}

// Objc Method
// 1. MethodDeclare
// [class|instance]Method returnType names types parameters
// 2. FunctionImplementation -> "{  }"
- (void)name:(int)a b:(int)b{

}
